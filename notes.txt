For Cucumber framework we will need the following 3 dependencies:
cucumber-java, cucumber-core, cucumber-junit

In Cucumber framework:
  - the test scenarios are put in a feature file which are usually are created under resources folder
  - the feature file scenario steps are connected to step definitions through @CucumberOptions glue option in Runner class
      // Cucumber scenario step is matched to step definition method using the text of the scenario step
      // either with Regular Expressions or Cucumber Expressions
  - tags are the main way to control what scenario or feature files
  - Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps
  - Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO
             The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class



  If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
  When you use a doctring make sure to put each triple quote on its own line.
  Ex: Scenario: Example scenario for Database
      When I send the following query
        """
           select first_name,last_name,email,address,district,city,country from customer
           join address
           on customer.address_id = address.address_id
           join city
           on address.city_id  = city.city_id
           join country
           on city.country_id = country.country_id;
         """


      What are some common Cucumber exceptions?

      UndefinedStepException -  when a scenario step does not have matching step definition method

      PendingException - default exception that added to each step definition snippet

      AmbiguousStepDefinitionsException - this happens when one step has more than one matching step definitions

      DuplicateStepDefinitionException - happens when there are more than step definitions with the exactly matching text

      CucumberException: Could not convert arguments for step [I pass this information] defined at - happens when setep definition parameter
                         type does not match the datatable

      Cucumber DataTable - a cucumber structure that enables table-style data to be passed from a SINGLE step of a Cucumber scenario
                           into the step definition method

        Example:           Given I am on homepage
                           When I pass this information
                           | John | Doe | 12/09/1999 | 235-345-1234 | 322-09-6322 | 123 Main St, Vienna VA 22056 |


         The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding
         Java data structure for automatic transformation. The allowed types are List<E>, List<List<E>>, List<Map<K,V>>,
          Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long


      When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates
      unmodifiable versions of these data structures.


      Running tests thru CMD in Cucumber Framework:

      -Add Maven Surefire plugin (latest version)
      - Configure it by including the name of the class to run:

                         <configuration>
                              <includes>
                                  <include>**/*CucumberRunner.java</include>
                              </includes>
                          </configuration>

      - run with mvn test

      Running scenarios with specific tags thru cmd:


      mvn verify -Dcucumber.filter.tags="@temp"
      mvn verify -Dcucumber.filter.tags="@test and @temp"
      mvn verify -Dcucumber.filter.tags="@test or @temp"
      mvn verify -Dcucumber.filter.tags="@test and not @temp"

      When you run your test through CMD using Maven, tags passed thru CMD will override the tags from CukeRunner class.


      In Cucumber framework we can implement data-driven testing natively with Scenario Outline with Examples table.

      The difference between DataTable and Scenario Outline Examples table -> datatable belongs to one step of the scenario, examples table applies to the entire scenario



      If we have a large a dataset it can also read from an external file such as csv or excel file.
      To read from excel file we use Apache POI library



      @RunWith -> Junit annotation that makes the class a runnable class
      @CucumberOptions -> Cucumber annotation that helps us configure cucumber options to run the tests



      How to run a specific runner class thru CMD when you have multiple runners?
      - Maven surefire plugin determines the name of the runner class to run within its <configuration>  and <includes> tag

                  <plugin>
                      <groupId>org.apache.maven.plugins</groupId>
                      <artifactId>maven-surefire-plugin</artifactId>
                      <version>3.0.0-M5</version>
                      <configuration>

                          <testFailureIgnore>true</testFailureIgnore>
                          <includes>
                              <include>**/*CucumberRunner2.java</include>-->
                           </includes>
                      </configuration>
                  </plugin>

      - When you have multiple runners you can use a placeholder in surefire plugin
          and pass the name of the runner class thru command line with -D switch -> mvn verify -DrunnerClass=**/*CucumberRunner2.java

                       <plugin>
                          <groupId>org.apache.maven.plugins</groupId>
                          <artifactId>maven-surefire-plugin</artifactId>
                          <version>3.0.0-M5</version>
                          <configuration>

                              <testFailureIgnore>true</testFailureIgnore>
                              <includes>

                                  <include>${runnerClass}</include>-->

                              </includes>
                          </configuration>
                      </plugin>


      - How to re-run only the failed scenarios in Cucumber framework?

        1. Add "rerun:target/failed.txt" to your main runner class which generates a text file with the list of failed scenarios
        2. Add another runner class where you indicate the above text file's path for features:
                   features = "@target/failed.txt"
        3. Run main runner and failed scenarios runner back to back thru Maven Surefire plugin:
             <plugin>
                           <groupId>org.apache.maven.plugins</groupId>
                           <artifactId>maven-surefire-plugin</artifactId>
                           <version>3.0.0-M5</version>
                           <configuration>

                               <testFailureIgnore>true</testFailureIgnore>
                               <includes>
                                  <include>**/*CucumberRunner.java</include>-->
                                   <include>**/*FailedScenariosRunner.java</include>-->
                               </includes>
                           </configuration>
             </plugin>


         - How to run cross-browser tests in Cucumber framework?
           - We pass the name of the browser thru command line with -D switch and run the same tests with multiple commands
           - This can be done through batch file or through Jenkins commands
           - batch file example:
                   call mvn verify -Dbrowser=edge
                   call mvn verify -Dbrowser=chrome
                   call mvn verify -Dbrowser=headlessChrome


         We use "mvn verify" in Cucumber framework to run tests so that the pretty report is generated,
           otherwise you can run the tests as usual with mvn test


        How to run tests in parallel in Cucumber framework?

        We can enable parallel test in Cucumber natively with JUnit. But we need to remember that with this option
        you can run only FEATURES in parallel.
        If there is a need for running SCENARIOS in parallel, you can incorporate TestNG.

        Steps to implement running parallel Features in Cucumber with Junit:
         1.Give the scope of the feature files that you want to run in parallel in your runner class
              features = "src/test/resources/parallel"
           Optionally create a separate folder for feature files that you want to run in parallel

         2.Add these 2 options under the <configuration> tag of Maven Surefire plugin:
                <parallel>methods</parallel>
                <useUnlimitedThreads>true</useUnlimitedThreads>

         3.Run the tests thru command line





         DB Testing

         How do you test the DB?
         Can you explain your overall DB testing strategy?
         -Data Flow
         -Data Mapping
         -Business rules
         -Unit testing (verify column names, data types, ranges)
         -Performance/Security

         My database testing strategy consists of testing multiple aspects of the DB. I start with basic testing of the
         data flow from UI to DB and vice versa. I also verify the correct data mapping of the information for corresponding
         fields on the UI and columns in the DB. I also verify various business rules and logic related to the DB.


         Common database testing scenarios:

         Verify that data inserted from UI is reflected properly in the appropriate table and vice versa.
         Check for data integrity. Data should be stored in single or multiple tables based on design.
         Verify Table Schema, Column names as per Design Document
         Verify Unicode Support (e.g store Chinese/Japanese Characters)
         Check if input data is not truncated while saving. Field length shown to the user on a page and in database schema should be the same
         Check numeric fields with minimum, maximum, and float values
         Check numeric fields with negative values
         Check if database fields are designed with the correct data type and data length
         Check if all table constraints like a Primary key, Foreign key, etc. are implemented correctly
         Test stored procedures and triggers with sample input data
         Test if input field leading and trailing spaces are truncated before committing data to the database
         Check values for columns which are not accepting null values
         Null values should not be allowed for the Primary key column
         Checking for duplicates.




         Git Branching WorkFlow through Pull Requests:
         1. Clone the framework into the local machine
         2. Create a new branch -> git branch <branchName>
         3. Switch to your branch -> git checkout <branchName>
            It is important to VERIFY ON WHICH BRANCH you are currently at before adding any changes -> git branch
         4. Add your changes and commit your changes in your own branch.
         5. Push the new branch to remote repository -> we need to give the name of the remote repository and the branch
              git push --set-upstream origin db_tests_sprint5
         6. Create a PR (Pull Request) in Github to merge my branch changes with the main. CLick on create a pull request button and indicate which branches must be merged. Other collaborators will be notified about this PR.
         7. The person authorized to merge the PR will need to review and merge and close the PR. If there are merge conflicts, they must be resolved before merging.
         8. Once the my branch changes are successfully merged with the main in GitHub, bring the changes from remote's main to local main with "git pull" while you are in main  branch locally
         9. Once you have your and other team member's changes in your local main, to merge them into your branch use "git rebase main" or "git merge main" while in your branch































