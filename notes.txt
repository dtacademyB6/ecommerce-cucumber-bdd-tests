For Cucumber framework we will need the following 3 dependencies:
cucumber-java, cucumber-core, cucumber-junit

In Cucumber framework:
  - the test scenarios are put in a feature file which are usually are created under resources folder
  - the feature file scenario steps are connected to step definitions through @CucumberOptions glue option in Runner class
      // Cucumber scenario step is matched to step definition method using the text of the scenario step
      // either with Regular Expressions or Cucumber Expressions
  - tags are the main way to control what scenario or feature files
  - Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps
  - Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO
             The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class



  If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
  When you use a doctring make sure to put each triple quote on its own line.
  Ex: Scenario: Example scenario for Database
      When I send the following query
        """
           select first_name,last_name,email,address,district,city,country from customer
           join address
           on customer.address_id = address.address_id
           join city
           on address.city_id  = city.city_id
           join country
           on city.country_id = country.country_id;
         """


      What are some common Cucumber exceptions?

      UndefinedStepException -  when a scenario step does not have matching step definition method

      PendingException - default exception that added to each step definition snippet

      AmbiguousStepDefinitionsException - this happens when one step has more than one matching step definitions

      DuplicateStepDefinitionException - happens when there are more than step definitions with the exactly matching text

      CucumberException: Could not convert arguments for step [I pass this information] defined at - happens when setep definition parameter
                         type does not match the datatable

      Cucumber DataTable - a cucumber structure that enables table-style data to be passed from a SINGLE step of a Cucumber scenario
                           into the step definition method

        Example:           Given I am on homepage
                           When I pass this information
                           | John | Doe | 12/09/1999 | 235-345-1234 | 322-09-6322 | 123 Main St, Vienna VA 22056 |


         The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding
         Java data structure for automatic transformation. The allowed types are List<E>, List<List<E>>, List<Map<K,V>>,
          Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long


      When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates
      unmodifiable versions of these data structures.


      Running tests thru CMD in Cucumber Framework:

      -Add Maven Surefire plugin (latest version)
      - Configure it by including the name of the class to run:

                         <configuration>
                              <includes>
                                  <include>**/*CucumberRunner.java</include>
                              </includes>
                          </configuration>

      - run with mvn test

      Running scenarios with specific tags thru cmd:


      mvn verify -Dcucumber.filter.tags="@temp"
      mvn verify -Dcucumber.filter.tags="@test and @temp"
      mvn verify -Dcucumber.filter.tags="@test or @temp"
      mvn verify -Dcucumber.filter.tags="@test and not @temp"

      When you run your test through CMD using Maven, tags passed thru CMD will override the tags from CukeRunner class.


      In Cucumber framework we can implement data-driven testing natively with Scenario Outline with Examples table









